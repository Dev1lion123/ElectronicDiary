// <auto-generated />
using System;
using ElectronicDiary.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ElectronicDiary.Migrations
{
    [DbContext(typeof(DB_Context))]
    partial class DB_ContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.11");

            modelBuilder.Entity("ElectronicDiary.Entities.Classes", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Assessment_comments")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Date")
                        .HasColumnType("DATETIME");

                    b.Property<int?>("GroupsID_Group")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ID_Group")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ID_Subject")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ID_Teacher")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("SubjectsID_Subject")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("TeachersID")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.HasIndex("GroupsID_Group");

                    b.HasIndex("SubjectsID_Subject");

                    b.HasIndex("TeachersID");

                    b.ToTable("Classes");
                });

            modelBuilder.Entity("ElectronicDiary.Entities.Grades", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Assessment_comment")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<int?>("Grade")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("GroupsID_Group")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ID_Group")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ID_Student")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ID_Subject")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ID_Teacher")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("StudentID")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("SubjectsID_Subject")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("TeachersID")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.HasIndex("GroupsID_Group");

                    b.HasIndex("StudentID");

                    b.HasIndex("SubjectsID_Subject");

                    b.HasIndex("TeachersID");

                    b.ToTable("Grades");
                });

            modelBuilder.Entity("ElectronicDiary.Entities.Groups", b =>
                {
                    b.Property<int>("ID_Group")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .HasColumnType("TEXT");

                    b.HasKey("ID_Group");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("ElectronicDiary.Entities.Rols", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.ToTable("Rols");
                });

            modelBuilder.Entity("ElectronicDiary.Entities.Student", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Course")
                        .HasColumnType("INTEGER");

                    b.Property<string>("E_mail")
                        .HasColumnType("TEXT");

                    b.Property<string>("Firstname")
                        .HasColumnType("TEXT");

                    b.Property<int?>("GroupsID_Group")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ID_Group")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ID_User")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Lastname")
                        .HasColumnType("TEXT");

                    b.Property<string>("Patronymic")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("Phone")
                        .HasColumnType("TEXT");

                    b.Property<int?>("UsersID")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.HasIndex("GroupsID_Group");

                    b.HasIndex("UsersID");

                    b.ToTable("Student");
                });

            modelBuilder.Entity("ElectronicDiary.Entities.Subjects", b =>
                {
                    b.Property<int>("ID_Subject")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .HasColumnType("TEXT");

                    b.HasKey("ID_Subject");

                    b.ToTable("Subjects");
                });

            modelBuilder.Entity("ElectronicDiary.Entities.Teacher_Groups", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ID_Group")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ID_Teacher")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.ToTable("Teacher_Groups");
                });

            modelBuilder.Entity("ElectronicDiary.Entities.Teachers", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("E_mail")
                        .HasColumnType("TEXT");

                    b.Property<string>("Firstname")
                        .HasColumnType("TEXT");

                    b.Property<int>("ID_User")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Lastname")
                        .HasColumnType("TEXT");

                    b.Property<string>("Patronymic")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("Phone")
                        .HasColumnType("TEXT");

                    b.Property<int?>("UsersID")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.HasIndex("UsersID");

                    b.ToTable("Teachers");
                });

            modelBuilder.Entity("ElectronicDiary.Entities.Users", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ID_Role")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Login")
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .HasColumnType("TEXT");

                    b.Property<int?>("RolsID")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.HasIndex("RolsID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("GroupsTeacher_Groups", b =>
                {
                    b.Property<int>("GroupsID_Group")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Teacher_GroupsID")
                        .HasColumnType("INTEGER");

                    b.HasKey("GroupsID_Group", "Teacher_GroupsID");

                    b.HasIndex("Teacher_GroupsID");

                    b.ToTable("GroupsTeacher_Groups");
                });

            modelBuilder.Entity("Teacher_GroupsTeachers", b =>
                {
                    b.Property<int>("Teacher_GroupsID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TeachersID")
                        .HasColumnType("INTEGER");

                    b.HasKey("Teacher_GroupsID", "TeachersID");

                    b.HasIndex("TeachersID");

                    b.ToTable("Teacher_GroupsTeachers");
                });

            modelBuilder.Entity("ElectronicDiary.Entities.Classes", b =>
                {
                    b.HasOne("ElectronicDiary.Entities.Groups", "Groups")
                        .WithMany("Classes")
                        .HasForeignKey("GroupsID_Group");

                    b.HasOne("ElectronicDiary.Entities.Subjects", "Subjects")
                        .WithMany("Classes")
                        .HasForeignKey("SubjectsID_Subject");

                    b.HasOne("ElectronicDiary.Entities.Teachers", "Teachers")
                        .WithMany("Classes")
                        .HasForeignKey("TeachersID");

                    b.Navigation("Groups");

                    b.Navigation("Subjects");

                    b.Navigation("Teachers");
                });

            modelBuilder.Entity("ElectronicDiary.Entities.Grades", b =>
                {
                    b.HasOne("ElectronicDiary.Entities.Groups", "Groups")
                        .WithMany("Grades")
                        .HasForeignKey("GroupsID_Group");

                    b.HasOne("ElectronicDiary.Entities.Student", "Student")
                        .WithMany("Grades")
                        .HasForeignKey("StudentID");

                    b.HasOne("ElectronicDiary.Entities.Subjects", "Subjects")
                        .WithMany("Grades")
                        .HasForeignKey("SubjectsID_Subject");

                    b.HasOne("ElectronicDiary.Entities.Teachers", "Teachers")
                        .WithMany("Grades")
                        .HasForeignKey("TeachersID");

                    b.Navigation("Groups");

                    b.Navigation("Student");

                    b.Navigation("Subjects");

                    b.Navigation("Teachers");
                });

            modelBuilder.Entity("ElectronicDiary.Entities.Student", b =>
                {
                    b.HasOne("ElectronicDiary.Entities.Groups", "Groups")
                        .WithMany("Student")
                        .HasForeignKey("GroupsID_Group");

                    b.HasOne("ElectronicDiary.Entities.Users", "Users")
                        .WithMany("Student")
                        .HasForeignKey("UsersID");

                    b.Navigation("Groups");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("ElectronicDiary.Entities.Teachers", b =>
                {
                    b.HasOne("ElectronicDiary.Entities.Users", "Users")
                        .WithMany("Teachers")
                        .HasForeignKey("UsersID");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("ElectronicDiary.Entities.Users", b =>
                {
                    b.HasOne("ElectronicDiary.Entities.Rols", "Rols")
                        .WithMany("Users")
                        .HasForeignKey("RolsID");

                    b.Navigation("Rols");
                });

            modelBuilder.Entity("GroupsTeacher_Groups", b =>
                {
                    b.HasOne("ElectronicDiary.Entities.Groups", null)
                        .WithMany()
                        .HasForeignKey("GroupsID_Group")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ElectronicDiary.Entities.Teacher_Groups", null)
                        .WithMany()
                        .HasForeignKey("Teacher_GroupsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Teacher_GroupsTeachers", b =>
                {
                    b.HasOne("ElectronicDiary.Entities.Teacher_Groups", null)
                        .WithMany()
                        .HasForeignKey("Teacher_GroupsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ElectronicDiary.Entities.Teachers", null)
                        .WithMany()
                        .HasForeignKey("TeachersID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ElectronicDiary.Entities.Groups", b =>
                {
                    b.Navigation("Classes");

                    b.Navigation("Grades");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("ElectronicDiary.Entities.Rols", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("ElectronicDiary.Entities.Student", b =>
                {
                    b.Navigation("Grades");
                });

            modelBuilder.Entity("ElectronicDiary.Entities.Subjects", b =>
                {
                    b.Navigation("Classes");

                    b.Navigation("Grades");
                });

            modelBuilder.Entity("ElectronicDiary.Entities.Teachers", b =>
                {
                    b.Navigation("Classes");

                    b.Navigation("Grades");
                });

            modelBuilder.Entity("ElectronicDiary.Entities.Users", b =>
                {
                    b.Navigation("Student");

                    b.Navigation("Teachers");
                });
#pragma warning restore 612, 618
        }
    }
}
